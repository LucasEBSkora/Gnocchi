@startuml "class"

package en {
  package graph {
    package type {
      abstract class Type {
        + toString() : string
        {abstract} + accept(visit: TypeVisitor)
      }

      class PrimitiveType extends Type {
        {static} flyweightMap : map<Primitive, PrimitiveType>
        {static} + getPrimitiveType(value: Primitive) : PrimitiveType
        + accept(visit: TypeVisitor)
        - PrimitiveType(value: Primitive)
      }

      PrimitiveType "1" *--> "1" Primitive

      enum Primitive {
        INT8
        INT16
        INT24
        INT32
        INT
        UIT8
        UINT16
        UINT24
        UINT32
        UINT
        FLOAT
        DOUBLE
        NUMBER
        BOOL
        CHAR
      }

      class ArrayType extends Type {
        + dimensions: vector<int>
        + accept(visit: TypeVisitor)
        + ArrayType(baseType, vector<int> dimensions)
      }

      ArrayType o--> "1" Type

      interface TypeVisitor {
        {abstract} + visit(type: PrimitiveType)
        {abstract} + visit(type: ArrayType)
      }

      TypeVisitor .. Type : visits

      class TypeToStringVisitor implements TypeVisitor {
        {abstract} + visit(type: PrimitiveType)
        {abstract} + visit(type: ArrayType)
        getResult(): string
      }

    }

    class Graph
    class Vertex
  }
}
@enduml